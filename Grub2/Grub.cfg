

insmod all_video    
insmod video_bochs
insmod video_cirrus
insmod font
insmod gfxterm
insmod gfxterm_background
insmod gfxmenu
insmod gettext
insmod jpeg
insmod png
insmod tga

insmod regexp
insmod configfile
#insmod getkey
insmod linux  
#insmod initrd


# Required with MBR for GUI
if [ "${grub_platform}" = "pc" ]; then
insmod vbe
insmod vga
echo GRUB running on: BIOS
fi

# Required with EFI for GUI and to prevent "No video mode set" error
if [ "${grub_platform}" = "efi" ]; then
insmod efi_gop
insmod efi_uga
echo GRUB running on: UEFI
fi

# insmod all file system
for fs in affs afs bfs btrfs cbfs cpio cpio_be exfat ext2 fat hfs hfsplus iso9660 jfs minix minix2 minix2_be minix3 minix3_be minix_be newc nilfs2 ntfs odc procfs reiserfs romfs sfs squash4 tar udf ufs1 ufs1_be ufs2 xfs zfs; do
  insmod $fs
done

set pager=1
set locale_dir=/Grub2/Locale
set lang=zh_CN
set timeout=100
set default=0
loadfont /grub2/fonts/POP40px.pf2;
loadfont /grub2/fonts/CJK10px.pf2;
loadfont /grub2/fonts/CJK12px.pf2;
loadfont /grub2/fonts/CJK18px.pf2;
loadfont /grub2/fonts/CJK20px.pf2;
loadfont /grub2/fonts/CJK24px.pf2;
loadfont /grub2/fonts/CJK14px.pf2;
loadfont /grub2/fonts/CJK16px.pf2;
loadfont /grub2/fonts/sarasa20px.pf2;
set gfxterm_font=/grub2/fonts/sarasa20px.pf2

set gfxmode=auto
terminal_output gfxterm
set theme=/grub2/themes/Bootman/theme.txt

# list all menu
submenu "[0] Scanning All System" --class="pc" --hotkey="0"{
  set theme=/grub2/themes/Bootman/theme.txt
  for dev in (*);do
    test -e ${dev};
    if test "$?" = "1"; then
      continue;
    fi;
    # remove parentheses
    regexp --set=device '\((.*)\)' $dev;
    # get label of device
    probe --set=lable ($device);
    # check boot type
    if [ "${grub_platform}" = "pc" ];then
      # check bootable Windows
      if test -f $dev/bootmgr; then
        menuentry "Windows on device $device" --clas="windows"{
          insmod ntldr
          set root=$dev
          ntldr /bootmgr
        }
      fi
    fi
    if [ "${grub_platform}" = "efi" ]; then
      # check bootable Windows
      if test -f $dev/efi/Microsoft/Boot/bootmgfw.efi; then
        menuentry "Windows on device $device $lable" --clas="windows"{
          set root=$dev
          chainloader /efi/Microsoft/Boot/bootmgfw.efi
        }
      fi
    fi
    # check bootable grub
    if test -f $dev/boot/grub/grub.cfg; then
      menuentry "GRUB on device $device $lable" --clas="linux"{
        insmod configfile
        set root=$dev
        configfile /boot/grub/grub.cfg
      }
    fi
    # check bootable Ubuntu
    for str in "/boot/grub/core.img" "/boot/grub/i386-pc/core.img" "/@/boot/grub/i386-pc/core.img" "/@/boot/grub/core.img" "/@/boot/grub/i386-pc/core.img"; do
      if [ -f $dev$str ]; then
        menuentry "Ubuntu on device $device $lable" --class="ubunt"{
          multiboot $dev$str;
          boot;
        }
      fi;
    done
  done
}
submenu "[1] Windows Installer" --class="windows" --hotkey="1" {
  if test "$grub_platform" == "pc" ;then
    ntldr /bootmgr;
  fi;
  if test "$grub_platform" == "efi" ;then
    chainloader /EFI/Boot/bootx64win.efi;
  fi;
}
submenu "[2] Linux ISO" --class="linux" --hotkey="2" {
  set linux_dir=/iso/linux
  search --file --set=root --set=groot $linux_dir/*.iso
  for file in $linux_dir/*.iso ; do
		if test -f "${file}"; then
      regexp --set=filename '^/iso/linux/(.*).*$' "${file}"
      set theme=/grub2/themes/Bootman/theme.txt
			submenu "${filename}" "${file}" --class="iso"{
				loopback loop $2
        set theme=/grub2/themes/Bootman/theme.txt
        if test -f (loop)/boot/grub/loopback.cfg; then
          menuentry "Boot ISO (loopback)" $2 --class="iso"{
            set root=(loop); 
            iso_path=$2
            export iso_path; 
            set theme=/grub2/themes/Bootman/theme.txt
            export theme
            configfile /boot/grub/loopback.cfg
          }
        fi
        if test -d (loop)/casper; then
          menuentry "Boot ISO (Ubuntu)" $2 --class="ubuntu" {
            set theme=/grub2/themes/Bootman/theme.txt
            set linux_extra="iso-scan/filename="$2
            insmod getkey
            configfile /grub2/distro/ubuntu.sh
          }
        fi
        for cfgpath in "(loop)/isolinux.cfg" "(loop)/isolinux/isolinux.cfg" "(loop)/boot/isolinux.cfg" "(loop)/boot/isolinux/isolinux.cfg" "(loop)/syslinux/syslinux.cfg"; do
          if test -f "${cfgpath}"; then
            menuentry "Boot ISO (isolinux) UNRECOMMENDED" "$2" "${cfgpath}" --class="linux"{
              echo "!!!!! ATTENETION !!!!! "
              echo "NEED ADD var linux_extra MANUALLY"
              echo "how to: select on any menu and press [E] to edit menu, add '\$linux_extra' to linux line"
              echo "press any key to continue"
              insmod getkey
              getkey keytemp
              insmod syslinuxcfg
              root=(loop); 
              linux_extra="iso-scan/filename=$2" 
              export linux_extra; 
              set theme=/grub2/themes/Bootman/theme.txt
              syslinux_configfile -i "$3"
            }
		      fi
      	done
			}
    fi
    done
}

menuentry "[3] Android x86" --class="android" --hotkey="3" {
  configfile ${prefix}/Config/Android.cfg;
}


menuentry "[M] File Manager" --class="filemanager" --hotkey="m" {
  if [ "${grub_platform}" = "pc" ]; then
    set cfgfile="find --set-root /grub2/grubfm.iso;map --mem /grub2/grubfm.iso (0xff);map --hook;chainloader (0xff);boot"
    linux /grub2/grub4dos.exe --config-file=$cfgfile
  fi
  if [ "${grub_platform}" = "efi" ]; then
    chainloader /efi/boot/grubfmx64.efi
  fi
	
}

menuentry "[R] Reboot" --class="reboot" --hotkey="r" {
  echo "READY TO REBOOT, PLEASE WAIT"
  reboot
}

menuentry "[F] Reboot into BIOS setup" --class="fwsetup" --hotkey="f" {
  echo "READY TO REBOOT INTO BIOS SETUP, PLEASE WAIT"
  fwsetup
}

menuentry "[S] Shutdown" --class="shutdown" --hotkey="s" {
  echo "EJECT SEQUENCE INITIATED"
  echo "SELF DESTRUCTING"
  echo "GOODBYE"
  halt
}


