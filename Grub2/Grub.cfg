#
# insmod all file system
for fs in affs afs bfs btrfs cbfs cpio cpio_be exfat ext2 fat hfs hfsplus iso9660 jfs minix minix2 minix2_be minix3 minix3_be minix_be newc nilfs2 ntfs odc procfs reiserfs romfs sfs squash4 tar udf ufs1 ufs1_be ufs2 xfs zfs; do
  insmod $fs
done

set theme=/grub2/themes/Bootman/theme.txt


insmod regexp

#insmod getkey
insmod linux  
#insmod initrd


search --file --set=root /Grub2/bootman.ico
#set pager=1
set locale_dir=/Grub2/Locale
set lang=zh_CN
set timeout=100
set default=0
loadfont /grub2/fonts/batman40px.pf2;
loadfont /grub2/fonts/sarasa-term-sc-bold-18px.pf2;
loadfont /grub2/fonts/sarasa-term-sc-bold-20px.pf2;
loadfont /grub2/fonts/sarasa-term-sc-bold-14px.pf2;
loadfont /grub2/fonts/sarasa-term-sc-bold-16px.pf2;
loadfont /grub2/fonts/sarasa-term-sc-bold-24px.pf2;
set gfxterm_font=/grub2/fonts/sarasa-term-sc-bold-16px.pf2





# list all menu
submenu "[0] Scanning All System" --class="pc" --hotkey="0"{
  set theme=/grub2/themes/Bootman/theme.txt
  echo "Scanning All System"
  for dev in (*,*);do
    test -e ${dev};
    if test "$?" = "1"; then
      continue;
    fi;
    # remove parentheses
    regexp --set=device '\((.*)\)' $dev;
    # check boot type
    if [ "${grub_platform}" = "pc" ];then
      # check bootable Windows
      if test -f $dev/bootmgr; then
        echo "'Windows Bootmgr' found on $dev"
        menuentry "[$device] Windows Bootmgr" $dev --class="windows"{
          insmod ntldr
          set root=$2
          ntldr /bootmgr
        }
      fi
    fi
    if [ "${grub_platform}" = "efi" ]; then
      # check bootable Windows
      if test -f $dev/efi/Microsoft/Boot/bootmgfw.efi; then
        echo "'Windows EFI' found on $dev"
        menuentry "[$device] Windows EFI  " $dev --class="windows"{
          set root=$2
          chainloader /efi/Microsoft/Boot/bootmgfw.efi
        }
      fi
      # check bootable Ubuntu
      if test -f $dev/EFI/ubuntu/shim*.efi; then
        echo "'Ubuntu efi' found on $dev"
        menuentry "[$device] Ubuntu EFI" $dev --class="ubuntu"{
          set root=$2
          chainloader /EFI/ubuntu/shim*.efi
        }
      fi

    fi
    # check bootable grub
    if test -f $dev/boot/grub/grub.cfg; then
      echo "'GRUB' found on $dev"
      menuentry "[$device] GRUB " $dev --class="linux"{
        insmod configfile
        set root=$2
        configfile /boot/grub/grub.cfg
      }
    fi
    # check bootable Ubuntu
    for str in "/boot/grub/core.img" "/boot/grub/i386-pc/core.img" "/@/boot/grub/i386-pc/core.img" "/@/boot/grub/core.img" "/@/boot/grub/i386-pc/core.img"; do
      if test -f $dev$str; then
        echo "'Ubuntu core' found on $dev"
        menuentry "[$device] Ubuntu core" $dev --class="ubuntu"{
          multiboot $2$str;
          boot;
        }
      fi;
    done
  done
}
submenu "[1] Windows Installer" --class="windows" --hotkey="1" {
  if test "$grub_platform" == "pc" ;then
    ntldr /bootmgr;
  fi;
  if test "$grub_platform" == "efi" ;then
    chainloader /bootmgr.efi;
  fi;
}
submenu "[2] Linux ISO" --class="linux" --hotkey="2" {
  set linux_dir=/iso/linux
  if test -f $linux_dir/*.iso; then
      search --file --set=root --set=groot $linux_dir/*.iso
      for file in $linux_dir/*.iso ; do
        if test -f "${file}"; then
          regexp --set=filename '^/iso/linux/(.*).*$' "${file}"
          set theme=/grub2/themes/Bootman/theme.txt
          submenu "${filename}" "${file}" --class="iso"{
            loopback loop $2
            set theme=/grub2/themes/Bootman/theme.txt
            if test -f (loop)/boot/grub/loopback.cfg; then
              menuentry "Boot ISO (loopback)" $2 --class="iso"{
                set root=(loop); 
                iso_path=$2
                export iso_path; 
                set theme=/grub2/themes/Bootman/theme.txt
                export theme
                configfile /boot/grub/loopback.cfg
              }
            fi
            if test -d (loop)/casper; then
              menuentry "Boot ISO (Ubuntu)" $2 --class="ubuntu" {
                set theme=/grub2/themes/Bootman/theme.txt
                set linux_extra="iso-scan/filename="$2
                insmod getkey
                configfile /grub2/distro/ubuntu.sh
              }
            fi
            for cfgpath in "(loop)/isolinux.cfg" "(loop)/isolinux/isolinux.cfg" "(loop)/boot/isolinux.cfg" "(loop)/boot/isolinux/isolinux.cfg" "(loop)/syslinux/syslinux.cfg"; do
              if test -f "${cfgpath}"; then
                menuentry "Boot ISO (isolinux) UNRECOMMENDED" "$2" "${cfgpath}" --class="linux"{
                  echo "!!!!! ATTENETION !!!!! "
                  echo "NEED ADD var linux_extra MANUALLY"
                  echo "how to: select on any menu and press [E] to edit menu, add '\$linux_extra' to linux line"
                  echo "press any key to continue"
                  insmod getkey
                  getkey keytemp
                  insmod syslinuxcfg
                  root=(loop); 
                  linux_extra="iso-scan/filename=$2" 
                  export linux_extra; 
                  set theme=/grub2/themes/Bootman/theme.txt
                  syslinux_configfile -i "$3"
                }
              fi
            done
          }
        fi
      done
  else
    echo "No .ISO file found in /iso/linux/"
    echo "press [ENTER] to continue"
    read
  fi

  
}
submenu "[3] Windows ISO" --class="windows" --hotkey="3"{
  set windows_dir=/iso/windows
  if test -f $windows_dir/*.iso; then
    search --file --set=root --set=groot $windows_dir/*.iso
    for file in $windows_dir/*.iso; do
      if test -f "${file}"; then
        regexp --set=filename '^/iso/windows/(.*).*$' "${file}"
        set theme=/grub2/themes/Bootman/theme.txt
        submenu "${filename}" "${file}" --class="iso"{
          menuentry "Boot ISO (memdisk)" $2 --class="iso" {
            linux16 /grub2/memdisk iso raw
            initrd16 ${2}
          }
        }
      fi
    done
  else
    echo "No .ISO file found in /iso/windows/"
    echo "press [ENTER] to continue"
    read
  fi
  
}

submenu "[4] Android ISO" --class="android" --hotkey="4" {
  set android_dir=/iso/android
  if test -f $android_dir/*.iso; then
    search --file --set=root --set=groot $android_dir/*.iso
    for file in $android_dir/*.iso; do
      if test -f "${file}"; then
        regexp --set=filename '^/iso/android/(.*).*$' "${file}"
        set theme=/grub2/themes/Bootman/theme.txt
        submenu "${filename}" "${file}" --class="iso"{
          set theme=/grub2/themes/Bootman/theme.txt
          loopback loop $2
          if test -d (loop)/efi/RemixOS;then
            menuentry "Run RemixOS without Installation" $2 --class="android"{
                set root=(loop); 
                linux_extra="iso-scan/filename=$2" 
                linux /kernel initrd=/initrd.img root=/dev/ram0 androidboot.hardware=remix_cn_x86_64 androidboot.selinux=permissive quiet SERIAL=random logo.showlogo=1 SRC= DATA= DATA_IN_MEM=1 $linux_extra
                initrd /initrd.img 
              } 
          else
            if test -f (loop)/kernel; then
              menuentry "Run Android without Installation" $2 --class="android"{
                set root=(loop); 
                linux_extra="iso-scan/filename=$2" 
                linux /kernel root=/dev/ram0 androidboot.hardware=android_x86 quiet SRC= DATA= vga=788 $linux_extra
                initrd /initrd.img 
              }            
              menuentry "Install Android" $2 --class="android"{
                set root=(loop); 
                linux_extra="iso-scan/filename=$2" 
                linux /kernel root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug INSTALL=1 DEBUG= $linux_extra
                initrd /initrd.img 
              }
            else
              echo "No Android Kernel found"
              echo "press [ENTER] to continue"
              read
            fi
          fi
        }
      fi
    done
  else
    echo "No .ISO file found in /iso/android/"
    echo "press [ENTER] to continue"
    read
  fi
}


menuentry "[M] File Manager" --class="filemanager" --hotkey="m" {
  if [ "${grub_platform}" = "pc" ]; then
    set cfgfile="find --set-root /grub2/grubfm.iso;map --mem /grub2/grubfm.iso (0xff);map --hook;chainloader (0xff);boot"
    linux /grub2/grub4dos.exe --config-file=$cfgfile
  fi
  if [ "${grub_platform}" = "efi" ]; then
    chainloader /efi/boot/grubfmx64.efi
  fi
	
}

menuentry "[R] Reboot" --class="reboot" --hotkey="r" {
  echo "READY TO REBOOT, PLEASE WAIT"
  reboot
}

menuentry "[F] Reboot into BIOS setup" --class="fwsetup" --hotkey="f" {
  echo "READY TO REBOOT INTO BIOS SETUP, PLEASE WAIT"
  fwsetup
}

menuentry "[S] Shutdown" --class="shutdown" --hotkey="s" {
  echo "EJECT SEQUENCE INITIATED"
  echo "SELF DESTRUCTING"
  echo "GOODBYE"
  halt
}


